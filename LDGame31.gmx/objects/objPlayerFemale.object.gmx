<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerFemaleIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization
onGround = true;
airTime = 0;
animal = noone;
item = instance_create(x,y,objScreen);  // default to screen door
facing = scrRandomDirection();
color = c_red;

points = 0;
hitPoints = 5;

heldSpriteOffset = 35;
lastAnimal = noone;
collidedAgain = false;

spriteIdle = sprPlayerFemaleIdle;
spriteRun = sprPlayerFemaleRun;

image_speed = 8 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special Positioning
phy_position_x = scrLoopX(phy_position_x);

if phy_linear_velocity_y == 0
{
    onGround = true;
} else {
    onGround = false;
}

if phy_rotation != 0
{
    phy_rotation = 0;   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action

if keyboard_check_pressed(ord('S')) || keyboard_check(ord('S')) || keyboard_check_pressed(vk_space) || keyboard_check(vk_space)
{
    if animal != noone
    {
        /// throw animal
        lastAnimal = animal;
        animal.thrownBy = self.id;
        script_execute(animal.throw, animal);
        scrReleaseObject(self, animal);
    } else {
        /// use item
        scrUseItem(self, item);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Horizontal Movement

var airAcceleration;

if onGround
{
    airAcceleration = 1.0;
    airTime = 0;
} else {
    airAcceleration = 0.5;
}

if keyboard_check_pressed(ord('A')) || keyboard_check(ord('A'))
{
    facing = -1;
    sprite_index = spriteRun;
    phy_linear_velocity_x = facing * 175;
}
else if keyboard_check_pressed(ord('D')) || keyboard_check(ord('D'))
{
    facing = 1;
    sprite_index = spriteRun;
    phy_linear_velocity_x = facing * 175;
}
else
{
    sprite_index = spriteIdle;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vertical Movement
if keyboard_check(ord('W')) || keyboard_check(ord('W'))
{
    if airTime &lt; 15
    {
        airTime++;
        phy_linear_velocity_y = -200;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset collision detection for lastAnimal
if !collidedAgain &amp;&amp; lastAnimal != noone
{
    lastAnimal = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAnimal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick up animal
if animal == noone
{
    collidedAgain = false;
    
    if other.id != lastAnimal {
        scrPickupObject(self.id, other.id);
    } else {
        collidedAgain = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the sprite
image_xscale = facing;
scrDrawToCircle(self.id);

/*
if (item != noone) {

        var x1 = phy_position_x;
    var y1 = phy_position_y - item.screenWidth / 2;
    var x2 = x1 + item.screenWidth * facing;
    var y2 = y1 + item.screenWidth;
        draw_set_color(c_black);
    draw_rectangle(x1,y1,x2,y2,false);
    }
    
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.25</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.850000023841858</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,8</point>
    <point>64,8</point>
    <point>64,56</point>
    <point>16,56</point>
  </PhysicsShapePoints>
</object>
