<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objDynamicParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

isHeld = false;
currentHolder = noone;
objectType = "animal";

isInGravity = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special Positioning
if isHeld
{
    phy_position_x = currentHolder.phy_position_x;
    phy_position_y = currentHolder.phy_position_y - 50;
    phy_linear_velocity_x = 0;
    phy_linear_velocity_y = 0;
    phy_angular_velocity = 0;
} else {
    phy_position_x = scrLoopX(phy_position_x);
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for gravity changes

var gravWidth = 128;

if (isInGravity){ 
   if (phy_position_y &lt; (objFakeFloor.y - gravWidth)) {
        isInGravity = false;

        var xPos = phy_position_x;
        var yPos = phy_position_y;
        var xPosPrev = phy_position_xprevious;
        var yPosPrev = phy_position_yprevious;    
        
        var retVal = scrLineToCircle(phy_position_x, phy_position_y);
        var retValPrev = scrLineToCircle(xPosPrev, yPosPrev);
        y = retVal[1];
        
        phy_position_x = x;
        phy_position_y = y;
        
        show_debug_message("Gravity switched off");
        show_debug_message("");
    }
    
} else {

    var pX = phy_position_x;
    var pY = phy_position_y;
    
    var cX = objCircle.x;
    var cY = objCircle.y;
    var r = objCircle.radius;


    var mX = pX - cX;
    var mY = -(pY - cY);
       
    var mag = sqrt(mX * mX + mY * mY); 
    
    var theta = arcsin(mY / mag) + pi;
    
    if (cX &lt; pX){ 
        theta += pi;
        if (cY &lt; pY) {
            theta =  -theta;
        } else {
            theta = -theta;
        }
    }
        
    //var dist = sqrt(power(nX - pX, 2) + power(nY - pY, 2));

    var dist = r - mag;    

    // calc theta goes here    
    theta = scrCalcTheta(phy_position_x, phy_position_y);
    
        
    //show_debug_message(r);
    var nX = cos(theta) * r + cX;
    var nY = sin(theta) * r + cY;
   
    if (abs(dist) &lt; gravWidth) {       
//        instance_create(nX, nY, objBox2);         
  //      instance_create(phy_position_x, phy_position_y, objBox2);         
        
        isInGravity = true;
        
        //Convert back to gravity well coordinates    
        var retVal = scrCircleToLine(theta, gravWidth);    
        
        //var retVal2 = scrLineToCircle(retVal[0], retVal[1]);
        var xPos = phy_position_x;
        var yPos = phy_position_y;
        var xPosPrev = phy_position_xprevious;
        var yPosPrev = phy_position_yprevious;
               
        phy_position_x = retVal[0];
        phy_position_y = retVal[1];
 
        
               
        //instance_create(phy_position_x, phy_position_y, objBox2)
        
        show_debug_message("Gravity switched on");   
     
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the sprite

if (isInGravity) {
    scrDrawToCircle(self.id);
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
